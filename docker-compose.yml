version: '3.8'

volumes:
  elasticdata:


services:

  nginx:
    image: nginx:1.23.1
    restart: always
    ports:
      - target: 443
        published: 443
        mode: host
      - target: 80
        published: 80
        mode: host
    volumes:
      - ./conf/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./conf/nginx/certs:/etc/nginx/certs
      - ./frontend/frontend_build:/frontend_build
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: ./backend.dockerfile
    restart: always
    volumes:
      - ./backend/backend:/backend/
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      elastic:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery_backend:
    build:
      context: ./backend
      dockerfile: ./celery.dockerfile
    restart: always
    volumes:
      - ./backend/backend:/backend/
    env_file:
      - .env
    depends_on:
      - backend
      - redis

  # beat_backend:
  #   build:
  #     context: ./backend
  #     dockerfile: ./beat.dockerfile
  #   restart: always
  #   volumes:
  #     - ./backend/backend:/backend/
  #   env_file:
  #     - .env
  #   depends_on:
  #     - backend
  #     - redis

  websocket:
    build:
      context: ./websocket
      dockerfile: ./websocket.dockerfile
    restart: always
    env_file:
      - .env
    volumes:
      - ./websocket/websocket_app:/websocket_app
    ports:
      - "8001:8000"

  redis:
    image: redis:7.0.0
    restart: always
    logging:
      driver: none
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 3s

  elastic:
    image: elasticsearch:8.4.2
    restart: always
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - 9200:9200
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
    mem_limit: 2g
    healthcheck:
      test: curl -fs http://127.0.0.1:9200/_cat/health || exit 1
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:14.2
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./conf/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 1s
  # -----------------------------------------------------------------------------------------
  # flower_backend:
  #   image: mher/flower
  #   command: [ "celery", "flower", "--url-prefix=flower_backend" ]
  #   restart: always
  #   environment:
  #     - DEBUG=1
  #     - CELERY_BROKER=${CELERY_BROKER_URL}
  #     - CELERY_BACKEND=${CELERY_RESULT_BACKEND}
  #     - CELERY_ENABLE_UTC=True
  #     - FLOWER_BASIC_AUTH=root:fQbxHqbR
  #   logging:
  #     driver: "none"
  #   ports:
  #     - 5555:5555
  #   depends_on:
  #     - celery_backend
